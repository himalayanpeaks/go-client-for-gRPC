// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: device.proto

package power

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PowerSupply_OpenConnection_FullMethodName = "/power.PowerSupply/OpenConnection"
	PowerSupply_SetVolts_FullMethodName       = "/power.PowerSupply/SetVolts"
	PowerSupply_SetAmps_FullMethodName        = "/power.PowerSupply/SetAmps"
	PowerSupply_AllChannelsOn_FullMethodName  = "/power.PowerSupply/AllChannelsOn"
	PowerSupply_AllChannelsOff_FullMethodName = "/power.PowerSupply/AllChannelsOff"
)

// PowerSupplyClient is the client API for PowerSupply service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PowerSupplyClient interface {
	OpenConnection(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*StatusReply, error)
	SetVolts(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*StatusReply, error)
	SetAmps(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*StatusReply, error)
	AllChannelsOn(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReply, error)
	AllChannelsOff(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReply, error)
}

type powerSupplyClient struct {
	cc grpc.ClientConnInterface
}

func NewPowerSupplyClient(cc grpc.ClientConnInterface) PowerSupplyClient {
	return &powerSupplyClient{cc}
}

func (c *powerSupplyClient) OpenConnection(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, PowerSupply_OpenConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerSupplyClient) SetVolts(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, PowerSupply_SetVolts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerSupplyClient) SetAmps(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, PowerSupply_SetAmps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerSupplyClient) AllChannelsOn(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, PowerSupply_AllChannelsOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerSupplyClient) AllChannelsOff(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, PowerSupply_AllChannelsOff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PowerSupplyServer is the server API for PowerSupply service.
// All implementations must embed UnimplementedPowerSupplyServer
// for forward compatibility.
type PowerSupplyServer interface {
	OpenConnection(context.Context, *OpenRequest) (*StatusReply, error)
	SetVolts(context.Context, *SetRequest) (*StatusReply, error)
	SetAmps(context.Context, *SetRequest) (*StatusReply, error)
	AllChannelsOn(context.Context, *Empty) (*StatusReply, error)
	AllChannelsOff(context.Context, *Empty) (*StatusReply, error)
	mustEmbedUnimplementedPowerSupplyServer()
}

// UnimplementedPowerSupplyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPowerSupplyServer struct{}

func (UnimplementedPowerSupplyServer) OpenConnection(context.Context, *OpenRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenConnection not implemented")
}
func (UnimplementedPowerSupplyServer) SetVolts(context.Context, *SetRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVolts not implemented")
}
func (UnimplementedPowerSupplyServer) SetAmps(context.Context, *SetRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAmps not implemented")
}
func (UnimplementedPowerSupplyServer) AllChannelsOn(context.Context, *Empty) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllChannelsOn not implemented")
}
func (UnimplementedPowerSupplyServer) AllChannelsOff(context.Context, *Empty) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllChannelsOff not implemented")
}
func (UnimplementedPowerSupplyServer) mustEmbedUnimplementedPowerSupplyServer() {}
func (UnimplementedPowerSupplyServer) testEmbeddedByValue()                     {}

// UnsafePowerSupplyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PowerSupplyServer will
// result in compilation errors.
type UnsafePowerSupplyServer interface {
	mustEmbedUnimplementedPowerSupplyServer()
}

func RegisterPowerSupplyServer(s grpc.ServiceRegistrar, srv PowerSupplyServer) {
	// If the following call pancis, it indicates UnimplementedPowerSupplyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PowerSupply_ServiceDesc, srv)
}

func _PowerSupply_OpenConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerSupplyServer).OpenConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PowerSupply_OpenConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerSupplyServer).OpenConnection(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerSupply_SetVolts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerSupplyServer).SetVolts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PowerSupply_SetVolts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerSupplyServer).SetVolts(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerSupply_SetAmps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerSupplyServer).SetAmps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PowerSupply_SetAmps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerSupplyServer).SetAmps(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerSupply_AllChannelsOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerSupplyServer).AllChannelsOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PowerSupply_AllChannelsOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerSupplyServer).AllChannelsOn(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerSupply_AllChannelsOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerSupplyServer).AllChannelsOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PowerSupply_AllChannelsOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerSupplyServer).AllChannelsOff(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PowerSupply_ServiceDesc is the grpc.ServiceDesc for PowerSupply service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PowerSupply_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "power.PowerSupply",
	HandlerType: (*PowerSupplyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenConnection",
			Handler:    _PowerSupply_OpenConnection_Handler,
		},
		{
			MethodName: "SetVolts",
			Handler:    _PowerSupply_SetVolts_Handler,
		},
		{
			MethodName: "SetAmps",
			Handler:    _PowerSupply_SetAmps_Handler,
		},
		{
			MethodName: "AllChannelsOn",
			Handler:    _PowerSupply_AllChannelsOn_Handler,
		},
		{
			MethodName: "AllChannelsOff",
			Handler:    _PowerSupply_AllChannelsOff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device.proto",
}
